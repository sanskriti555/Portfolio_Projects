/*
Analyzing of employee database

Skills used: SQL Basics, Aggregate functions, Sub-queries, Case statement, Operators, Joins, View, Window Functions, Stored Procedure
*/



/* 
Each part of the project is divided into three phases

1. Application area
2. Objective to achieve
3. SQL Query (as per MYSQL syntax)
*/


---------------------------------------------------------------------------------


-- Application of SELECT, FROM, WHERE


-- Objective - Query to display employee number, first name and last name of all female employees


SELECT 
	emp_no,
	first_name,
	last_name
FROM
	employees
WHERE
	Gender = 'F';

--------------------------------------------------------------------------------


-- Application of GROUP BY, HAVING


-- Objective - Query to display the department numbers and their respective count of employees wherein the total count of employees is more than 20


SELECT 
	dept_no, 
	count(emp_no) as total_emp_count
FROM 
	dept_emp
GROUP BY
	 dept_no
HAVING 
	total_emp_count > 20;

---------------------------------------------------------------------------------


-- Application of aggregate functions


-- Objective - Query to fetch the total and the average amount of money spent on salaries over the employees who have joined after 1st of January 1997


SELECT 
	sum(salary) as total_salary,
	avg(salary) as avg_salary
FROM 
	salary
WHERE
	from_date '1997-01-01';

---------------------------------------------------------------------------------


-- Application of sub-queries


-- Objective - Extract the information about all department managers who were hired between the 1st of January 1990 and the 1st of January 1995


SELECT
	*
FROM
	dept_manager
WHERE
	emp_no IN (SELECT emp_no FROM employees WHERE hire_date BETWEEN '1990-01-01' AND '1995-01-01');


-- Objective - Extract the entire information for all employees whose job title is “Assistant Engineer”. 


SELECT
	*
FROM
	employees e
WHERE
	EXISTS( SELECT * FROM titles t WHERE t.emp_no = e.emp_no AND title = 'Assistant Engineer'); 


----------------------------------------------------------------------------------

-- Application of pattern matching operator


-- Objective - Fetch the information about all those employees whose first name contains 'jim' and their last name contains 'i' in its second place


SELECT 
	*
FROM
	employees
WHERE
	First_name LIKE (%jim%) AND Last_name LIKE (_i%);


--------------------------------------------------------------------------------------

-- Application of Joins


-- Objective - Extract a list containing information about all managers’ employee number, first and last name, department number, and hire date 


SELECT
	e.emp_no,
	e.first_name,
	e.last_name,
	dm.dept_no,
	e.hire_date
FROM
	employees e
JOIN
	dept_manager dm ON e.emp_no = dm.emp_no; 


-- Objective - Extract the information of all managers whose last name is 'Marsks'


SELECT
	e.emp_no,  
	e.first_name,  
	e.last_name,  
	dm.dept_no,  
	dm.from_date  
FROM  
	employees e  
LEFT JOIN   
	dept_manager dm ON e.emp_no = dm.emp_no  
WHERE  
	e.last_name = 'Marsks'  
ORDER BY 
	dm.dept_no DESC, e.emp_no;


-- Objective - Extract the highest salary drawn under each department and also the employee number and name of the employee drawing same.


SELECT 
	de.dept_no,
	MAX(s.salary) as Highest_salary,
	e.emp_no,
	e.first_name,
	e.last_name
FROM
	dept_emp de join employees e on de.emp_no = e.emp_no join salaries s on e.emp_no = s.emp_no
GROUP BY
	de.dept_no
ORDER BY
	s.salary desc;


---------------------------------------------------------------------------------------------------------------------------


-- Application of case statement


-- Objective - Extract information about the managers: employee number, first name, and last name.
-- Objective - The information table should contain the difference between the maximum and minimum salary of that employee, and whethert their salary range was higher than $30,000 or NOT.


SELECT
	dm.emp_no,  
	e.first_name,  
	e.last_name,  
	MAX(s.salary) - MIN(s.salary) AS salary_difference,  
	CASE  
	WHEN MAX(s.salary) - MIN(s.salary) > 30000 THEN 'Salary was raised by more then $30,000'  
	ELSE 'Salary was NOT raised by more then $30,000'  
	END AS salary_raise  
FROM  
	dept_manager dm  JOIN  employees e ON e.emp_no = dm.emp_no  JOIN  salaries s ON s.emp_no = dm.emp_no  

GROUP BY 
	s.emp_no;  


----------------------------------------------------------------------------------------------------------------------------


-- Application of window functions (assuming the entire information of employee is into one table unlike above)


-- Objective - Fetch first two employee number from each department to join the company 


SELECT
	*
FROM
	(SELECT e.*, row_number() over (partition by dept_name order by emp_no asc as rn from emp e) as rn from emp e) as x
WHERE
	x.rn < 3;


-- Objective - Fetch the top 3 employee earning the maximum salary under each department


SELECT
	*
FROM
	(SELECT e.*, RANK() over (partition by dept_name order by salary desc) as rn from emp e) as x
WHERE
	x.rn > 4;


-- Objective - Fetch a query to display whether if the salary of an employee is greater than, lower than or equal to their previous employee under each department


SELECT 
	e.*,
	lag(salary) over (partition by dept_name order by emp_id asc) as previous_emp_sal,
	CASE 
	WHEN e.salary > lag(salary) over (partition by dept_name order by emp_id asc) THEN 'higher than previous emp',
	WHEN e.salary < lag(salary) over (partition by dept_name order by emp_id asc) THEN 'lower than previous emp',
	WHEN e.salary = lag(salary) over (partition by dept_name order by emp_id asc) THEN 'equal to previous emp',
	END as sal_range
FROM
	emp;


----------------------------------------------------------------------------------------------------------------------


-- Application of view


-- Objective - Create a view that will extract the average salary of all managers registered in the database. Round this value to the nearest cent.


CREATE OR REPLACE VIEW v_manager_avg_salary AS
SELECT
	ROUND(AVG(salary), 2)
FROM
	salaries s JOIN dept_manager m ON s.emp_no = m.emp_no;


-------------------------------------------------------------------------------------------------------------------


-- Application of stored procedures


-- Objective - Create a procedure called ‘emp_info’ that uses as parameters the first and the last name of an individual, and returns their employee number.


DELIMITER $$
CREATE PROCEDURE emp_info(in p_first_name varchar(255), in p_last_name varchar(255), out p_emp_no integer)
BEGIN
SELECT
	e.emp_no
INTO 
	p_emp_no 
FROM
	employees e
WHERE
	e.first_name = p_first_name
	AND e.last_name = p_last_name;
END$$
DELIMITER ;


-------------------------------------------------------------------------------------------------------------------

-- END OF THE PROJECT






























